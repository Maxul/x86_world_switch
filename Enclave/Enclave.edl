/*
 * Copyright (C) 2011-2017 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
	include "time.h"
	from "sgx_tstdc.edl" import *;

    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */
    trusted {
		public void ecall_sample(void);
		public void ocall_test(void);
		public void gettimeofday_test(void);
		
		public void ecall_malloc_test(int sz);
		public void ecall_memset_test(int sz);
		public void ecall_memset_plain(int sz, [user_check] void *pOutside);
		public void ecall_sendto_test(int fd, [in, out, size=addrlen] void *addr, int addrlen);
		public void ecall_sendto_nocopy_test(int fd, [user_check] void *buf, int buflen, [in, out, size=addrlen] void *addr, int addrlen);
		public void ecall_concurrent_sendto([user_check] void *buf, int buflen, int cpu_mhz);
    };


    untrusted {
        void ocall_print_string([in, string] const char *str);
        unsigned long long rdtscllp();
        void ocall(void);
        
        int ocall_sgx_gettimeofday([in, out, size=tv_size]void *tv, int tv_size);
        int ocall_sendto(int sockfd, [in, size=len]const void *buf, size_t len, int flags, [in, size=addrlen]const void *dest_addr, unsigned int addrlen);
        int ocall_do_sendto(int sockfd, [user_check]const void *buf, size_t len, int flags, [in, size=addrlen]const void *dest_addr, unsigned int addrlen);
    };

};
